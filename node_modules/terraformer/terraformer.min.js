!function(e,t){"object"==typeof module&&"object"==typeof module.exports&&(exports=module.exports=t()),"object"==typeof window&&(e.Terraformer=t())}(this,function(){function o(e){return"[object Array]"===Object.prototype.toString.call(e)}function s(){var e=Array.prototype.slice.apply(arguments);void 0!==typeof console&&console.warn&&console.warn.apply(console,e)}function u(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function l(e){if(e.type)switch(e.type){case"Point":return[e.coordinates[0],e.coordinates[1],e.coordinates[0],e.coordinates[1]];case"MultiPoint":return h(e.coordinates);case"LineString":return h(e.coordinates);case"MultiLineString":return c(e.coordinates);case"Polygon":return c(e.coordinates);case"MultiPolygon":return f(e.coordinates);case"Feature":return e.geometry?l(e.geometry):null;case"FeatureCollection":return p(e);case"GeometryCollection":return d(e);default:throw new Error("Unknown type: "+e.type)}return null}function c(e){for(var t=null,n=null,r=null,i=null,a=0;a<e.length;a++)for(var o=e[a],s=0;s<o.length;s++){var u=o[s],l=u[0],c=u[1];null===t?t=l:t>l&&(t=l),null===n?n=l:l>n&&(n=l),null===r?r=c:r>c&&(r=c),null===i?i=c:c>i&&(i=c)}return[t,r,n,i]}function f(e){for(var t=null,n=null,r=null,i=null,a=0;a<e.length;a++)for(var o=e[a],s=0;s<o.length;s++)for(var u=o[s],l=0;l<u.length;l++){var c=u[l],f=c[0],h=c[1];null===t?t=f:t>f&&(t=f),null===n?n=f:f>n&&(n=f),null===r?r=h:r>h&&(r=h),null===i?i=h:h>i&&(i=h)}return[t,r,n,i]}function h(e){for(var t=null,n=null,r=null,i=null,a=0;a<e.length;a++){var o=e[a],s=o[0],u=o[1];null===t?t=s:t>s&&(t=s),null===n?n=s:s>n&&(n=s),null===r?r=u:r>u&&(r=u),null===i?i=u:u>i&&(i=u)}return[t,r,n,i]}function p(e){for(var n,t=[],r=e.features.length-1;r>=0;r--)n=l(e.features[r].geometry),t.push([n[0],n[1]]),t.push([n[2],n[3]]);return h(t)}function d(e){for(var n,t=[],r=e.geometries.length-1;r>=0;r--)n=l(e.geometries[r]),t.push([n[0],n[1]]),t.push([n[2],n[3]]);return h(t)}function g(e){var t=l(e);return{x:t[0],y:t[1],w:Math.abs(t[0]-t[2]),h:Math.abs(t[1]-t[3])}}function m(e){return e*n}function v(e){return e*r}function y(e,t){for(var n=0;n<e.length;n++)"number"==typeof e[n][0]&&(e[n]=t(e[n])),"object"==typeof e[n]&&(e[n]=y(e[n],t));return e}function _(e){var n=e[0],r=e[1];return[m(n/t)-360*Math.floor((m(n/t)+180)/360),m(Math.PI/2-2*Math.atan(Math.exp(-1*r/t)))]}function b(e){var n=e[0],r=Math.max(Math.min(e[1],89.99999),-89.99999);return[v(n)*t,t/2*Math.log((1+Math.sin(v(r)))/(1-Math.sin(v(r))))]}function E(e,t,n){if("Point"===e.type)e.coordinates=t(e.coordinates);else if("Feature"===e.type)e.geometry=E(e.geometry,t,!0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)e.features[r]=E(e.features[r],t,!0);else if("GeometryCollection"===e.type)for(var a=0;a<e.geometries.length;a++)e.geometries[a]=E(e.geometries[a],t,!0);else e.coordinates=y(e.coordinates,t);return n||t===b&&(e.crs=i),t===_&&delete e.crs,e}function x(e){return E(e,b)}function w(e){return E(e,_)}function T(e,t){return t>e?-1:e>t?1:0}function A(e,t){return e[0]>t[0]?-1:e[0]<t[0]?1:e[1]>t[1]?-1:e[1]<t[1]?1:0}function L(e,t,n){return T((t[0]-e[0])*(n[1]-e[1])-(n[0]-e[0])*(t[1]-e[1]),0)}function R(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}function S(e,t){var n=t;for(var r in e){var i=L(t,n,e[r]);(-1===i||0===i&&R(t,e[r])>R(t,n))&&(n=e[r])}return n}function C(e){if(0===e.length)return[];if(1===e.length)return e;for(var t=[e.sort(A)[0]],n=0;n<t.length;n++){var r=S(e,t[n]);r!==t[0]&&t.push(r)}return t}function N(e){for(var t,n=0;n<e.length-3;n++){var r=e[n],i=e[n+1],a=e[n+2],o=[i[0]-r[0],i[1]-r[1]],s=a[0]*o[1]-a[1]*o[0]+o[0]*r[1]-o[1]*r[0];if(0===n)t=0>s?!0:!1;else if(t&&s>0||!t&&0>s)return!1}return!0}function O(e,t){for(var n=!1,r=-1,i=e.length,a=i-1;++r<i;a=r)(e[r][1]<=t[1]&&t[1]<e[a][1]||e[a][1]<=t[1]&&t[1]<e[r][1])&&t[0]<(e[a][0]-e[r][0])*(t[1]-e[r][1])/(e[a][1]-e[r][1])+e[r][0]&&(n=!n);return n}function P(e,t){if(e&&e.length){if(1===e.length)return O(e[0],t);if(O(e[0],t)){for(var n=1;n<e.length;n++)if(O(e[n],t))return!1;return!0}return!1}return!1}function k(e,t,n,r){var i=(r[0]-n[0])*(e[1]-n[1])-(r[1]-n[1])*(e[0]-n[0]),a=(t[0]-e[0])*(e[1]-n[1])-(t[1]-e[1])*(e[0]-n[0]),o=(r[1]-n[1])*(t[0]-e[0])-(r[0]-n[0])*(t[1]-e[1]);if(0!==o){var s=i/o,u=a/o;if(s>=0&&1>=s&&u>=0&&1>=u)return!0}return!1}function I(e){return!isNaN(parseFloat(e))&&isFinite(e)}function M(e,t){if(I(e[0][0])){if(I(t[0][0])){for(var n=0;n<e.length-1;n++)for(var r=0;r<t.length-1;r++)if(k(e[n],e[n+1],t[r],t[r+1]))return!0}else for(var i=0;i<t.length;i++)if(M(e,t[i]))return!0}else for(var a=0;a<e.length;a++)if(M(e[a],t))return!0;return!1}function D(e){for(var t=[],n=0;n<e.length;n++){var r=e[n].slice();q(r[0],r[r.length-1])===!1&&r.push(r[0]),t.push(r)}return t}function q(e,t){for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function B(e,t){if(e.length!==t.length)return!1;for(var n=e.slice().sort(A),r=t.slice().sort(A),i=0;i<n.length;i++){if(n[i].length!==r[i].length)return!1;for(var a=0;a<n.length;a++)if(n[i][a]!==r[i][a])return!1}return!0}function F(e){if(e)switch(e.type){case"Point":return new G(e);case"MultiPoint":return new H(e);case"LineString":return new z(e);case"MultiLineString":return new $(e);case"Polygon":return new V(e);case"MultiPolygon":return new W(e);case"Feature":return new Z(e);case"FeatureCollection":return new Y(e);case"GeometryCollection":return new K(e);default:throw new Error("Unknown type: "+e.type)}}function G(e){var t=Array.prototype.slice.call(arguments);if(e&&"Point"===e.type&&e.coordinates)u(this,e);else if(e&&o(e))this.coordinates=e;else{if(!(t.length>=2))throw"Terraformer: invalid input for Terraformer.Point";this.coordinates=t}this.type="Point"}function H(e){if(e&&"MultiPoint"===e.type&&e.coordinates)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.MultiPoint";this.coordinates=e}this.type="MultiPoint"}function z(e){if(e&&"LineString"===e.type&&e.coordinates)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.LineString";this.coordinates=e}this.type="LineString"}function $(e){if(e&&"MultiLineString"===e.type&&e.coordinates)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.MultiLineString";this.coordinates=e}this.type="MultiLineString"}function V(e){if(e&&"Polygon"===e.type&&e.coordinates)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.Polygon";this.coordinates=e}this.type="Polygon"}function W(e){if(e&&"MultiPolygon"===e.type&&e.coordinates)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.MultiPolygon";this.coordinates=e}this.type="MultiPolygon"}function Z(e){if(e&&"Feature"===e.type)u(this,e);else{if(!(e&&e.type&&e.coordinates))throw"Terraformer: invalid input for Terraformer.Feature";this.geometry=e}this.type="Feature"}function Y(e){if(e&&"FeatureCollection"===e.type&&e.features)u(this,e);else{if(!o(e))throw"Terraformer: invalid input for Terraformer.FeatureCollection";this.features=e}this.type="FeatureCollection"}function K(e){if(e&&"GeometryCollection"===e.type&&e.geometries)u(this,e);else if(o(e))this.geometries=e;else{if(!e.coordinates||!e.type)throw"Terraformer: invalid input for Terraformer.GeometryCollection";this.type="GeometryCollection",this.geometries=[e]}this.type="GeometryCollection"}function X(e,t,n){for(var r=b(e),i=n||64,a={type:"Polygon",coordinates:[[]]},o=1;i>=o;o++){var s=o*(360/i)*Math.PI/180;a.coordinates[0].push([r[0]+t*Math.cos(s),r[1]+t*Math.sin(s)])}return a.coordinates=D(a.coordinates),w(a)}function Q(e,t,n){var r=n||64,i=t||250;if(!e||e.length<2||!i||!r)throw new Error("Terraformer: missing parameter for Terraformer.Circle");u(this,new Z({type:"Feature",geometry:X(e,i,r),properties:{radius:i,center:e,steps:r}}))}var e={},t=6378137,n=57.29577951308232,r=.017453292519943,i={type:"link",properties:{href:"http://spatialreference.org/ref/sr-org/6928/ogcwkt/",type:"ogcwkt"}},a={type:"link",properties:{href:"http://spatialreference.org/ref/epsg/4326/ogcwkt/",type:"ogcwkt"}},U=["length"];return F.prototype.toMercator=function(){return x(this)},F.prototype.toGeographic=function(){return w(this)},F.prototype.envelope=function(){return g(this)},F.prototype.bbox=function(){return l(this)},F.prototype.convexHull=function(){var t,n,e=[];if("Point"===this.type)return null;if("LineString"===this.type||"MultiPoint"===this.type){if(!(this.coordinates&&this.coordinates.length>=3))return null;e=this.coordinates}else if("Polygon"===this.type||"MultiLineString"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(t=0;t<this.coordinates.length;t++)e=e.concat(this.coordinates[t]);if(e.length<3)return null}else if("MultiPolygon"===this.type){if(!(this.coordinates&&this.coordinates.length>0))return null;for(t=0;t<this.coordinates.length;t++)for(n=0;n<this.coordinates[t].length;n++)e=e.concat(this.coordinates[t][n]);if(e.length<3)return null}else if("Feature"===this.type){var r=new F(this.geometry);return r.convexHull()}return new V({type:"Polygon",coordinates:D([C(e)])})},F.prototype.toJSON=function(){var e={};for(var t in this)this.hasOwnProperty(t)&&-1===U.indexOf(t)&&(e[t]=this[t]);return e.bbox=l(this),e},F.prototype.contains=function(e){return new F(e).within(this)},F.prototype.within=function(e){var t,n,r;if("Point"===e.type&&"Point"===this.type)return q(this.coordinates,e.coordinates);if("MultiLineString"===e.type&&"Point"===this.type)for(n=0;n<e.coordinates.length;n++){var i={type:"LineString",coordinates:e.coordinates[n]};if(this.within(i))return!0}if(("LineString"===e.type||"MultiPoint"===e.type)&&"Point"===this.type)for(n=0;n<e.coordinates.length;n++){if(this.coordinates.length!==e.coordinates[n].length)return!1;if(q(this.coordinates,e.coordinates[n]))return!0}if("Polygon"===e.type){if("Polygon"===this.type){if(e.coordinates.length===this.coordinates.length)for(n=0;n<this.coordinates.length;n++)if(B(this.coordinates[n],e.coordinates[n]))return!0;return this.coordinates.length&&P(e.coordinates,this.coordinates[0][0])?!M(D(this.coordinates),D(e.coordinates)):!1}if("Point"===this.type)return P(e.coordinates,this.coordinates);if("LineString"===this.type||"MultiPoint"===this.type){if(!this.coordinates||0===this.coordinates.length)return!1;for(n=0;n<this.coordinates.length;n++)if(P(e.coordinates,this.coordinates[n])===!1)return!1;return!0}if("MultiLineString"===this.type){for(n=0;n<this.coordinates.length;n++){var a=new z(this.coordinates[n]);if(a.within(e)===!1)return r++,!1}return!0}if("MultiPolygon"===this.type){for(n=0;n<this.coordinates.length;n++){var o=new F({type:"Polygon",coordinates:this.coordinates[n]});if(o.within(e)===!1)return!1}return!0}}if("MultiPolygon"===e.type){if("Point"===this.type){if(e.coordinates.length)for(n=0;n<e.coordinates.length;n++)if(t=e.coordinates[n],P(t,this.coordinates)&&M([this.coordinates],e.coordinates)===!1)return!0;return!1}if("Polygon"===this.type){for(n=0;n<this.coordinates.length;n++)if(e.coordinates[n].length===this.coordinates.length)for(j=0;j<this.coordinates.length;j++)if(B(this.coordinates[j],e.coordinates[n][j]))return!0;if(M(this.coordinates,e.coordinates)===!1&&e.coordinates.length){for(n=0;n<e.coordinates.length;n++)t=e.coordinates[n],r=P(t,this.coordinates[0][0])===!1?!1:!0;return r}}else if("LineString"===this.type||"MultiPoint"===this.type)for(n=0;n<e.coordinates.length;n++){var s={type:"Polygon",coordinates:e.coordinates[n]};return this.within(s)?!0:!1}else{if("MultiLineString"===this.type){for(n=0;n<this.coordinates.length;n++){var u=new z(this.coordinates[n]);if(u.within(e)===!1)return!1}return!0}if("MultiPolygon"===this.type){for(n=0;n<e.coordinates.length;n++){var l={type:"Polygon",coordinates:e.coordinates[n]};if(this.within(l)===!1)return!1}return!0}}}return!1},F.prototype.intersects=function(e){"Feature"===e.type&&(e=e.geometry);var t=new F(e);if(this.within(e)||t.within(this))return!0;if("Point"!==this.type&&"MultiPoint"!==this.type&&"Point"!==e.type&&"MultiPoint"!==e.type)return M(this.coordinates,e.coordinates);if("Feature"===this.type){var n=new F(this.geometry);return n.intersects(e)}return s("Type "+this.type+" to "+e.type+" intersection is not supported by intersects"),!1},G.prototype=new F,G.prototype.constructor=G,H.prototype=new F,H.prototype.constructor=H,H.prototype.forEach=function(e){for(var t=0;t<this.coordinates.length;t++)e.apply(this,[this.coordinates[t],t,this.coordinates]);return this},H.prototype.addPoint=function(e){return this.coordinates.push(e),this},H.prototype.insertPoint=function(e,t){return this.coordinates.splice(t,0,e),this},H.prototype.removePoint=function(e){return"number"==typeof e?this.coordinates.splice(e,1):this.coordinates.splice(this.coordinates.indexOf(e),1),this},H.prototype.get=function(e){return new G(this.coordinates[e])},z.prototype=new F,z.prototype.constructor=z,z.prototype.addVertex=function(e){return this.coordinates.push(e),this},z.prototype.insertVertex=function(e,t){return this.coordinates.splice(t,0,e),this},z.prototype.removeVertex=function(e){return this.coordinates.splice(e,1),this},$.prototype=new F,$.prototype.constructor=$,$.prototype.forEach=function(e){for(var t=0;t<this.coordinates.length;t++)e.apply(this,[this.coordinates[t],t,this.coordinates])},$.prototype.get=function(e){return new z(this.coordinates[e])},V.prototype=new F,V.prototype.constructor=V,V.prototype.addVertex=function(e){return this.insertVertex(e,this.coordinates[0].length-1),this},V.prototype.insertVertex=function(e,t){return this.coordinates[0].splice(t,0,e),this},V.prototype.removeVertex=function(e){return this.coordinates[0].splice(e,1),this},V.prototype.close=function(){this.coordinates=D(this.coordinates)},V.prototype.hasHoles=function(){return this.coordinates.length>1},V.prototype.holes=function(){if(holes=[],this.hasHoles())for(var e=1;e<this.coordinates.length;e++)holes.push(new V([this.coordinates[e]]));return holes},W.prototype=new F,W.prototype.constructor=W,W.prototype.forEach=function(e){for(var t=0;t<this.coordinates.length;t++)e.apply(this,[this.coordinates[t],t,this.coordinates])},W.prototype.get=function(e){return new V(this.coordinates[e])},W.prototype.close=function(){var e=[];return this.forEach(function(t){e.push(D(t))}),this.coordinates=e,this},Z.prototype=new F,Z.prototype.constructor=Z,Y.prototype=new F,Y.prototype.constructor=Y,Y.prototype.forEach=function(e){for(var t=0;t<this.features.length;t++)e.apply(this,[this.features[t],t,this.features])},Y.prototype.get=function(e){var t;return this.forEach(function(n){n.id===e&&(t=n)}),new Z(t)},K.prototype=new F,K.prototype.constructor=K,K.prototype.forEach=function(e){for(var t=0;t<this.geometries.length;t++)e.apply(this,[this.geometries[t],t,this.geometries])},K.prototype.get=function(e){return new F(this.geometries[e])},Q.prototype=new F,Q.prototype.constructor=Q,Q.prototype.recalculate=function(){return this.geometry=X(this.properties.center,this.properties.radius,this.properties.steps),this},Q.prototype.center=function(e){return e&&(this.properties.center=e,this.recalculate()),this.properties.center},Q.prototype.radius=function(e){return e&&(this.properties.radius=e,this.recalculate()),this.properties.radius},Q.prototype.steps=function(e){return e&&(this.properties.steps=e,this.recalculate()),this.properties.steps},Q.prototype.toJSON=function(){var e=F.prototype.toJSON.call(this);return e},e.Primitive=F,e.Point=G,e.MultiPoint=H,e.LineString=z,e.MultiLineString=$,e.Polygon=V,e.MultiPolygon=W,e.Feature=Z,e.FeatureCollection=Y,e.GeometryCollection=K,e.Circle=Q,e.toMercator=x,e.toGeographic=w,e.Tools={},e.Tools.positionToMercator=b,e.Tools.positionToGeographic=_,e.Tools.applyConverter=E,e.Tools.toMercator=x,e.Tools.toGeographic=w,e.Tools.createCircle=X,e.Tools.calculateBounds=l,e.Tools.calculateEnvelope=g,e.Tools.coordinatesContainPoint=O,e.Tools.polygonContainsPoint=P,e.Tools.arraysIntersectArrays=M,e.Tools.coordinatesContainPoint=O,e.Tools.coordinatesEqual=B,e.Tools.convexHull=C,e.Tools.isConvex=N,e.MercatorCRS=i,e.GeographicCRS=a,e});